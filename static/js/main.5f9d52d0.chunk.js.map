{"version":3,"sources":["routes/dashboard/components/search-filters/index.js","routes/dashboard/components/section-title/index.js","constants/index.js","routes/dashboard/components/tooltip/index.js","routes/dashboard/components/area-bump/index.js","routes/dashboard/components/landscape-tooltip/index.js","routes/dashboard/components/scatterplot/index.js","routes/dashboard/components/tabulator/index.js","routes/dashboard/components/scatterplot-static/index.js","routes/dashboard/components/modal-table/index.js","routes/dashboard/components/heat-map/index.js","routes/dashboard/index.js","config/aws-config.js","App.js","serviceWorker.js","index.js"],"names":["SearchFilters","SectionTitle","COLORS","red","orange","yellow","green","blue","indigo","violet","COLOR_SCHEMES","rainbow","ChartTooltip","props","name","className","value","text","React","memo","useState","colors","setColors","useEffect","colorScheme","color","title","chartData","data","length","margin","top","right","bottom","left","spacing","animate","tooltip","e","point","serieId","y","startLabel","endLabel","axisTop","axisBottom","tickSize","tickPadding","tickRotation","tickNumber","legend","legendPosition","legendOffset","loading","prevProps","nextProps","LandscapeTooltip","Dropdown","onSelect","evtKey","evt","setLandscapeAxis","target","Toggle","variant","id","xAxisLabel","Menu","Item","yAxisLabel","zAxisLabel","style","height","chartHeight","xScale","type","yScale","blendMode","nodeSize","key","values","minNodeSize","maxNodeSize","sizes","node","z","axisRight","orient","axisLeft","legends","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","itemDirection","symbolSize","symbolShape","effects","on","itemOpacity","all","xKey","yKey","options","placeholder","downloadDataFormatter","downloadReady","fileContents","blob","resizable","virtualDomBuffer","tooltips","columns","field","hozAlign","width","MainTable","ref","downloadData","console","log","table","modules","download","onClick","this","tabledata","updateData","Component","modalIsOpen","setIsOpen","setAllTableData","tables","setTables","modalTitle","setModalTitle","closeModal","allModal","formattedX","String","x","slice","complete","Object","keys","item","push","marginBottom","format","precision","min","xMin","max","xMax","xFormat","gridXValues","xVals","gridYValues","yVals","useMesh","axisBottomFormat","tickValues","isOpen","onAfterOpen","onRequestClose","contentLabel","ariaHideApp","_subtitle","PrismHeatMap","all_records","clean_all","ys","split","clean_data","i","includes","indexOf","indexBy","forceSquare","hoverTarget","cellHoverOthersOpacity","withRouter","base","require","apiKey","setLoadingHeatMapData","heatMapData","setHeatMapData","heatMapKeys","setHeatMapKeys","initialFilterLoadComplete","getHeatMapChartData","heat_result","heat_data","alldata","Set","Promise","resolve","reject","select","view","eachPage","records","fetchNextPage","forEach","record","fields","setting","get","clean_setting","dictionary","outcomes","val","j","add","err","error","single","fetchHeatMapData","a","result","Container","Row","config","cognito","REGION","USER_POOL_ID","APP_CLIENT_ID","App","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5f9d52d0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Form\n} from 'react-bootstrap'\n\nimport './index.css'\n\n\nfunction SearchFilterSection(props) {\n\n  const [titleIsChecked, setTitleIsChecked] = useState(true)\n\n  const onTitleSectionClicked = () => {\n\n    setTitleIsChecked(!titleIsChecked)\n    // console.log(\"title is checked: \", titleIsChecked)\n    for (let filter in props.filters){\n      //console.log(\"filter of props.filters; \", filter)\n      //console.log(\"titleIsChecked: \", titleIsChecked)\n      if (props.filters[filter] === titleIsChecked) {\n        props.onFilterClicked(props.title, filter, false)\n      }\n    }\n  }\n\n  const titleIsIndeterminate = () => {\n    let falseCount = 0;\n    let trueCount = 0;\n    for (let filter in props.filters){\n      if (props.filters[filter] === true){\n        trueCount = trueCount + 1;\n      } else if (props.filters[filter] === false){\n        falseCount = falseCount + 1;\n      }\n    }\n    return (falseCount > 0 && trueCount > 0);\n  }\n\n  return (\n    <div className=\"search-filter-section\">\n        <Form.Group className={\"checkbox-group title-checkbox-group \" + props.color}>\n          <Form.Check type=\"checkbox\" custom>\n            <Form.Check.Input\n              type=\"checkbox\"\n              isValid\n              checked={titleIsChecked}\n              onClick={() => onTitleSectionClicked()}\n              id={props.title + \"-title-checkbox\"}\n              readOnly\n              ref={input => {\n                if (input) {\n                  input.checked = titleIsChecked;\n                  input.indeterminate = titleIsIndeterminate();\n                }\n              }}\n            />\n            <Form.Check.Label htmlFor={props.title + \"-title-checkbox\"}>\n              <Button variant=\"link\" onClick={() => props.onTitleSectionClicked()}>{props.title}</Button>\n            </Form.Check.Label>\n          </Form.Check>\n        </Form.Group>\n      <div className=\"search-filters-container\">\n        {\n          Object.keys(props.filters).map((filter, index) => (\n              <Form.Group key={index} className={\"checkbox-group \" + props.color + \" \" + (props.activeFilter === filter ? 'active' : '')}\n                onMouseEnter={props.onFilterHover ? (e) => props.onFilterHover(filter) : null}\n                onMouseLeave={props.onFilterUnHover ? (e) => props.onFilterUnHover(filter) : null}\n              >\n                <Form.Check type=\"checkbox\" custom>\n                  <Form.Check.Input\n                    type=\"checkbox\"\n                    isValid\n                    checked={props.filters[filter]}\n                    onClick={\n                      function(e){\n                        //console.log(\"props.title: \", props.title, filter, props.filters)\n                        return props.onFilterClicked(props.title, filter, props.subCategory)\n                      }\n                    }\n                    id={filter + props.title + \"-checkbox\"}\n                    readOnly\n                  />\n                  <Form.Check.Label htmlFor={filter + props.title + \"-checkbox\"}>\n                    <Button variant=\"link\" onClick={(e) => props.onFilterLabelClicked(props.title, filter, props.subCategory)}>{filter}</Button>\n                  </Form.Check.Label>\n                </Form.Check>\n              </Form.Group>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\n\nfunction SearchFilters(props) {\n\n  const colors = {\n    'Studies': 'red',\n    'Populations': 'orange',\n    'Interventions': 'yellow',\n    'Outcomes': 'green',\n    'Conditions': 'blue',\n    'Geography': 'indigo',\n  }\n  // console.log(\"props.sections: \", Object.keys(props.sections))\n  // Object.keys(props.sections).map((key, index) => (\n  //\n  //     console.log(\"key: \", key)\n  //     console.log(\"index: \", index)\n  // ))\n\n  return (\n    <Form className='search-filters-form '>\n      {\n        Object.keys(props.sections).map((key, index) => (\n\n            <SearchFilterSection\n              key={index}\n              filters={props.sections[key]}\n              title={key}\n              filterIndex={index}\n              color={colors[props.activeCategory]}\n              onFilterClicked={props.onFilterClicked}\n              onFilterLabelClicked={props.onFilterLabelClicked}\n              activeFilter={props.activeFilter}\n              onFilterHover={props.onFilterHover}\n              onFilterUnHover={props.onFilterUnHover}\n            />\n        ))\n      }\n    </Form>\n  )\n}\n\nexport default SearchFilters;\n","import React from 'react'\n\nimport './index.css'\n\n\nfunction SectionTitle(props) {\n\n  return (\n    <div className={\"section-title-container \" + props.color}>\n      <p className=\"title\">{props.title}</p>\n    </div>\n  )\n}\n\nexport default SectionTitle;\n","\nexport const COLORS = {\n  red: '#E2445C',\n  orange: '#FDAB3D',\n  yellow: '#F8C500',\n  green: '#2ED47A',\n  blue: '#579BFC',\n  indigo: '#7E3B8A',\n  violet: '#A25DDC',\n}\n\nexport const COLOR_SCHEMES = {\n    red: [\"#E2445C\", \"#CC4159\", \"#B53E55\", \"#9F3B52\", \"#89384F\", \"#72364B\", \"#5C3348\", \"#463045\", \"#2F2D41\", \"#192A3E\" ],\n    orange: [ \"#FDAB3D\", \"#E49D3D\", \"#CA8E3D\", \"#B1803D\", \"#98723D\", \"#7E633E\", \"#65553E\", \"#4C473E\", \"#32383E\", \"#192A3E\" ],\n    yellow: [ \"#F8C500\", \"#DFB407\", \"#C6A30E\", \"#AE9115\", \"#95801C\", \"#7C6F22\", \"#635E29\", \"#4B4C30\", \"#323B37\", \"#192A3E\" ],\n    green: [ \"#2ED47A\", \"#2CC173\", \"#29AE6D\", \"#279B66\", \"#25885F\", \"#227659\", \"#206352\", \"#1E504B\",  \"#1B3D45\", \"#192A3E\" ],\n    blue: [\"#579BFC\", \"#508EE7\", \"#4982D2\", \"#4275BD\", \"#3B69A8\", \"#355C92\", \"#2E507D\", \"#274368\", \"#203753\", \"#192A3E\" ],\n    indigo: [ \"#7E3B8A\", \"#733982\", \"#683779\", \"#5C3571\", \"#513368\", \"#463260\", \"#3B3057\", \"#2F2E4F\", \"#242C46\", \"#192A3E\" ],\n    violet: [ \"#A25DDC\", \"#9357CA\", \"#8452B9\", \"#744CA7\", \"#654696\", \"#564184\", \"#473B73\", \"#373561\", \"#283050\", \"#192A3E\" ],\n    rainbow: [ \"#E2445C\", \"#A25DDC\", \"#6734BC\", \"#7E3B8A\", \"#579BFC\", \"#02A7F8\", \"#01BAD7\", \"#019588\", \"#2ED47A\", \"#89C541\", \"#CCDE1D\", \"#F8C500\", \"#FFC301\"],\n}\n","import React from 'react'\n\nimport './index.css'\n\nconst ChartTooltip = (props) => {\n\n  if (props.name)\n    return (\n      <div className=\"chart-tooltip\">\n          <p className=\"tooltip-value\">{props.value || 0}</p>\n          <div className=\"tooltip-divider\"></div>\n          <p className=\"tooltip-text\">{props.text}</p>\n      </div>\n    )\n\n  else\n    return (\n      <div className=\"chart-tooltip\">\n          <p className=\"tooltip-value\">{props.value || 0}</p>\n          <div className=\"tooltip-divider\"></div>\n          <p className=\"tooltip-text\">{props.text}</p>\n      </div>\n    )\n}\n\nexport default ChartTooltip\n","import React, { useEffect, useState } from 'react'\n\nimport Spinner from 'react-spinkit'\nimport { ResponsiveAreaBump } from '@nivo/bump'\n\nimport { COLORS, COLOR_SCHEMES } from '../../../../constants'\nimport ChartTooltip from '../tooltip'\n\nimport './index.css'\n\n\nconst PrismAreaBump = (props) => {\n\n  const [colors, setColors] = useState([])\n  useEffect(() => {\n    if (props.colorScheme) {\n      setColors({'scheme': props.colorScheme})\n    }\n    else if (props.colors) {\n      setColors(COLOR_SCHEMES[props.colors])\n    } else if (props.color) {\n      setColors([COLORS[props.color]])\n    }\n  }, [props.color, props.colors, props.colorScheme])\n\n  return (\n    <div className=\"area-bump-container\">\n      <p className=\"chart-title\">{props.title}</p>\n      {\n          props.chartData && props.chartData[0] && props.chartData[0].data && props.chartData[0].data.length === 0 &&\n          <p className=\"no-data-label\">Not Enough Data Selected</p>\n      }\n      {\n        props.chartData && props.chartData[0] && props.chartData[0].data && props.chartData[0].data.length > 0 &&\n        <div className=\"chart\">\n          <ResponsiveAreaBump\n            data={ props.chartData }\n            margin={{ top: 40, right: 10, bottom: 40, left: 200 }}\n            spacing={10}\n            colors={ colors }\n            animate={false}\n            tooltip={e => <ChartTooltip text={e.point.serieId} value={e.point.data.y} /> }\n            startLabel={ \"id\" }\n            endLabel={ false }\n            axisTop={ null }\n            axisBottom={{\n              tickSize: 5,\n              tickPadding: 5,\n\n              tickRotation: 90,\n              tickNumber: 5,\n\n              legend: '',\n              legendPosition: 'middle',\n              legendOffset: 32\n            }}\n        />\n        </div>\n      }\n      {\n        props.loading &&\n        <div className=\"overlay\">\n          <Spinner name=\"ball-beat\" color={colors[0]} />\n        </div>\n      }\n    </div>\n  )\n}\n\nconst compareChartData = (prevProps, nextProps) => {\n  return prevProps.chartData === nextProps.chartData && prevProps.loading === nextProps.loading\n}\n\nexport default React.memo(PrismAreaBump, compareChartData);\n","import React from 'react'\n\nimport './index.css'\n\n\nconst LandscapeTooltip = (props) => {\n  let items = []\n  // for (let i of props.all){\n  //   items.push(i)\n  // }\n  //console.log(\"PROPSALL: \", props)\n  // let header = \"\"\n  // // want a title that has the x and y axis - an h2\n  // if (typeof(props.all.formattedX)==='object'){\n  //   let x = String(props.all.x)\n  //   header = x.slice(11, 15) + \" by \" + props.all.y\n  // } else {\n  //   header = props.all.x + \" by \" + props.all.y\n  // }\n  // // let header = props.all.x + \" by \" + props.all.y\n  // // items.push(<div className=\"landscape-tooltip-header\">\n  // //               <h2>{header}</h2>\n  // //             </div>\n  // // )\n  // let all = props.all.all\n  // for (let item of Object.keys(all)){\n  //   items.push(\n  //     <li><strong>{item} :</strong> {(all[item]).length} Records</li>\n  //   )\n  //\n  // }\n\n  // for (let item of Object.keys(props.all)) {\n  //   if ((Object.keys(props.all)).length > 1 ){\n  //     items.push(\n  //       <div className=\"landsape-tooltip-holder\">\n  //         <li><strong>Authors: </strong>{item.Authors}</li>\n  //         <li><strong>Title: </strong> {item.Title}</li>\n  //         <li><strong>Design: </strong>{item.Design}</li>\n  //         <hr />\n  //       </div>\n  //     )\n  //   } else {\n  //     items.push(\n  //       <div className=\"landsape-tooltip-holder\">\n  //         <li><strong>Authors: </strong>{item.Authors}</li>\n  //         <li><strong>Title: </strong> {item.Title}</li>\n  //         <li><strong>Design: </strong> {item.Design}</li>\n  //       </div>\n  //     )\n  //   }\n  //}\n\n  return (\n    <div className=\"landsape-tooltip-holder\">\n      <div className=\"landscape-tooltip-header\">\n        <h2>A header</h2>\n      </div>\n      {props.all.xKey + props.all.yKey}\n    </div>\n  )\n}\n\nexport default LandscapeTooltip\n","import React from 'react'\n\nimport { Dropdown } from 'react-bootstrap'\nimport Spinner from 'react-spinkit'\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot'\n\nimport { COLOR_SCHEMES } from '../../../../constants'\nimport ChartTooltip from '../tooltip'\n\nimport './index.css'\n\nconst PrismScatterplot = (props) => {\n\n  // const calculateHeight = () => {\n  //   let numYKeys = 0\n  //   for(let i=0; i<props.chartData.length; i++) {\n  //     const dataSet = props.chartData[i]\n  //     console.log(dataSet)\n  //     if (dataSet.data && dataSet.data.length > numYKeys)\n  //       numYKeys = dataSet.data.length\n  //   }\n  //   console.log(numYKeys)\n  //   console.log(numYKeys * 10)\n  //   return numYKeys * 10\n  // }\n  // const height = calculateHeight()\n\n  let dropdownItems = {\n    \"Start Year\": \"Start_Year\",\n    \"Age Groups\": \"Age_Groups\",\n    \"Sponsors\": \"Sponsor\",\n    \"Sponsor Types\": \"Sponsor_Type\",\n    \"Study Types\": \"Study_Type\",\n    \"Outcomes\": \"Outcome_Concepts\",\n    \"Settings\": \"Facility_Settings\",\n    \"Regions\": \"Geography_Regions\",\n    \"Interventions\": \"Interventions_Rollup\"\n  }\n\n  return (\n    <div className=\"scatterplot-chart-container\">\n      <div className=\"chart-title-container\">\n        <p className=\"chart-title\">{props.title}</p>\n        <div className=\"dropdown-filters-container\">\n          <div className=\"dropdown-container\">\n            <p>X</p>\n            <Dropdown onSelect={(evtKey, evt) => props.setLandscapeAxis(\"x\", evt.target.text)}>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">{props.xAxisLabel}</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item>Start Year</Dropdown.Item>\n                <Dropdown.Item>Age Groups</Dropdown.Item>\n                <Dropdown.Item>Sponsors</Dropdown.Item>\n                <Dropdown.Item>Sponsor Types</Dropdown.Item>\n                <Dropdown.Item>Study Types</Dropdown.Item>\n                <Dropdown.Item>Outcomes</Dropdown.Item>\n                <Dropdown.Item>Settings</Dropdown.Item>\n                <Dropdown.Item>Regions</Dropdown.Item>\n                <Dropdown.Item>Interventions</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div className=\"dropdown-container\">\n            <p>Y</p>\n            <Dropdown onSelect={(evtKey, evt) => props.setLandscapeAxis(\"y\", evt.target.text)}>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">{props.yAxisLabel}</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item>Start Year</Dropdown.Item>\n                <Dropdown.Item>Age Groups</Dropdown.Item>\n                <Dropdown.Item>Sponsors</Dropdown.Item>\n                <Dropdown.Item>Sponsor Types</Dropdown.Item>\n                <Dropdown.Item>Study Types</Dropdown.Item>\n                <Dropdown.Item>Outcomes</Dropdown.Item>\n                <Dropdown.Item>Settings</Dropdown.Item>\n                <Dropdown.Item>Regions</Dropdown.Item>\n                <Dropdown.Item>Interventions</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div className=\"dropdown-container\">\n            <p>N</p>\n            <Dropdown onSelect={(evtKey, evt) => props.setLandscapeAxis(\"z\", evt.target.text)}>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">{props.zAxisLabel}</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item>Enrollment</Dropdown.Item>\n                <Dropdown.Item>Trial Volume</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n      {\n          props.chartData.length === 0 &&\n          <p className=\"no-data-label\">Not Enough Data Selected</p>\n      }\n      {\n        props.chartData.length > 0 &&\n        <div className=\"chart\" style={{height: props.chartHeight}}>\n          <ResponsiveScatterPlot\n            data={ props.chartData }\n            height={props.chartHeight}\n            margin={{ top: 100, right: 140, bottom: 200, left: 200 }}\n            xScale={{ type: 'point' }}\n            yScale={{ type: 'point' }}\n            blendMode=\"multiply\"\n            colors={ COLOR_SCHEMES['rainbow'] }\n            nodeSize={{ key: 'z', values: [props.minNodeSize, props.maxNodeSize], sizes: [10, 150] }}\n            tooltip={ (e) => <ChartTooltip text={e.node.data.y} value={e.node.data.z} /> }\n            animate={ false }\n            axisTop={ null }\n            axisRight={ null }\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: -45,\n                legend: null\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: null\n            }}\n            legends={[{\n              anchor: 'bottom-right',\n              direction: 'column',\n              justify: false,\n              translateX: 130,\n              translateY: 0,\n              itemWidth: 100,\n              itemHeight: 12,\n              itemsSpacing: 5,\n              itemDirection: 'left-to-right',\n              symbolSize: 12,\n              symbolShape: 'square',\n              effects: [{\n                on: 'hover',\n                style: {\n                  itemOpacity: 1\n                }\n              }]\n            }]}\n          />\n        </div>\n      }\n      {\n        props.loading &&\n        <div className=\"overlay\">\n          <Spinner name=\"ball-beat\" color={COLOR_SCHEMES['rainbow'][0]} />\n        </div>\n      }\n    </div>\n  )\n}\n\nconst compareChartData = (prevProps, nextProps) => {\n  return prevProps.chartData === nextProps.chartData && prevProps.loading === nextProps.loading\n}\n\nexport default React.memo(PrismScatterplot, compareChartData);\n","\nimport React from \"react\";\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\nimport { ReactTabulator } from 'react-tabulator'\n\nimport \"react-tabulator/lib/styles.css\"; // default theme\nimport \"react-tabulator/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\n\n\n\n  let options = {\n\n    // height: 600,\n    placeholder: \"Loading Data...\",\n    downloadDataFormatter: (data) => data,\n    downloadReady: (fileContents, blob) => blob,\n    resizable:false,\n    virtualDomBuffer:1000,\n    tooltips:true,\n\n  };\n\n\n\n\n\n  let columns = [\n    { title: \"Intervention Name\", field: \"Intervention Name\", hozAlign: \"left\", width: 150 },\n    { title: \"Source\", field: \"Source\", hozAlign: \"left\", width: 150 },\n    { title: \"Evidence of Impelementation (Yes/No)\", field: \"Evidence of Impelementation (Yes/No)\", hozAlign: \"left\", width: 150 },\n    { title: \"Type of Evidence\", field: \"Type of Evidence\", hozAlign: \"left\", width: 150 },\n    { title: \"RCT\", field: \"RCT (Yes/No)\", hozAlign: \"left\", width: 150 },\n    { title: \"Significant CG Outcome\", field: \"Significant CG Outcome (Yes/No)\", hozAlign: \"left\", width: 150 },\n    { title: \"Status\", field: \"Status\", hozAlign: \"left\", width: 150 },\n    { title: \"Notes/Comments\", field: \"Notes/Comments\", hozAlign: \"left\", width: 150 },\n    { title: \"Measurement Tools (Caregiver Outcomes)\", field: \"Measurement Tools (Caregiver Outcomes)\", hozAlign: \"left\", width: 150 },\n    { title: \"Measurement Tools (PLWD Outcomes)\", field: \"Measurement Tools (PLWD Outcomes)\", hozAlign: \"left\", width: 150 },\n    { title: \"Intervention Setting\", field: \"Intervention Setting\", hozAlign: \"left\", width: 150 },\n    { title: \"# of Sessions\", field: \"# of Sessions\", hozAlign: \"left\", width: 150 },\n    { title: \"Duration (in weeks)\", field: \"Duration (in weeks)\", hozAlign: \"left\", width: 150 },\n    { title: \"Session Length (in hours)\", field: \"Session Length (in hours)\", hozAlign: \"left\", width: 150 },\n    { title: \"Provider:Client Ratio\", field: \"Provider:Client Ratio\", hozAlign: \"left\", width: 150 },\n    { title: \"Combined Outcome Categories\", field: \"Combined Outcome Categories\", hozAlign: \"left\", width: 150 },\n  ]\n\n\n\n\nclass MainTable extends React.Component {\n  ref = null;\n\n  downloadData = () => {\n    console.log(\"This first one: \", this.ref.table.modules.download)\n      this.ref.table.download(\"csv\", \"data.csv\");\n\n    };\n\n\n  render() {\n\n\n    return (\n      <div>\n        <button className=\"btn btn-primary download-btn\" onClick={this.downloadData}>Download</button>\n        <ReactTabulator\n          ref={ref => (this.ref = ref)}\n          columns={columns}\n          data={this.props.tabledata}\n          updateData={this.props.updateData}\n          options={options}\n          height={this.props.height}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MainTable;\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Dropdown } from 'react-bootstrap'\nimport Spinner from 'react-spinkit'\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot'\n\nimport { COLOR_SCHEMES } from '../../../../constants'\nimport ChartTooltip from '../tooltip'\nimport LandscapeTooltip from '../landscape-tooltip'\nimport Modal from 'react-modal';\nimport MainTable from '../tabulator'\nimport ModalTable from '../modal-table'\nimport './index.css'\n\n\n\n\nconst PrismStaticScatterplot = (props) => {\n\n\n\n  var subtitle;\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [allTableData, setAllTableData] = useState([])\n  const [tables, setTables] = useState([])\n  const [modalTitle, setModalTitle] = useState(\"\")\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // subtitle.style.color = '#f00';\n  }\n\n  function closeModal(){\n    setIsOpen(false);\n  }\n\n\n\n  function allModal(node){\n    console.log(\"NODE: \", node)\n    //console.log(\"type: \", typeof(node.data.formattedX))\n    let title=\"\"\n    if (typeof(node.data.formattedX)==='object'){\n      let x = String(node.data.x)\n      title = x.slice(4, 15) + \" x \" + node.data.y\n    } else {\n      title = node.data.x + \" x \" + node.data.y\n    }\n    let alltables = []\n    //console.log(\"CHECKING: \", node.data.all)\n    let complete = node.data.all\n\n\n    setAllTableData(alltables)\n    let table = []\n    for (let item of Object.keys(complete)){\n      console.log(\"complete[item]: \", complete)\n      table.push(<div>\n          <h3>{item}</h3>\n          <MainTable tabledata={ complete[item] } height={\"auto\"} />\n        </div>\n      )\n    }\n    console.log(table)\n    setTables(table)\n    setModalTitle(title)\n    openModal()\n  }\n    // const allModal = (node) => {\n    //\n    //   // const res = await getTableData(node)\n    //   // console.log(\"All DATA Fetching?: \", res)\n    //   setAllTableData([])\n    //   setModalTitle(node.data.y)\n    //   openModal()\n    //\n    // }\n\n  // function allModal(e, node){\n  //   console.log(\"E: \", e)\n  //   console.log(\"node: \", node)\n  //   openModal()\n  // }\n\n\n//<ChartTooltip text={e.node.data.y} value={e.node.data.z} />\n\n  return (\n    <div className=\"scatterplot-chart-container\">\n      <div className=\"chart-title-container\">\n        <p className=\"chart-title\">{props.title}</p>\n\n      </div>\n      {\n          props.chartData.length === 0 &&\n          <p className=\"no-data-label\">Not Enough Data Selected</p>\n      }\n      {\n        props.chartData.length > 0 &&\n        <div className=\"chart\" style={{height: props.chartHeight}}>\n          <ResponsiveScatterPlot\n            data={ props.chartData }\n\n            height={800}\n            margin={{ top: 70, right: 300, bottom: props.marginBottom, left: 200 }}\n\n            xScale={{ type: props.type, format: props.format, precision: props.precision, min: props.xMin, max: props.xMax  }}\n            xFormat={ props.xFormat }\n            yScale={{ type: 'point' }}\n            blendMode=\"multiply\"\n            colors={ COLOR_SCHEMES['rainbow'] }\n            nodeSize={{ key: 'z', values: [props.minNodeSize, props.maxNodeSize], sizes: [10, 150] }}\n\n            tooltip={ function(e) {\n              //console.log(\"Tooltip E: \", e.node.data);\n              return <LandscapeTooltip all={e.node.data} />} }\n            gridXValues={ props.xVals }\n            gridYValues={ props.yVals }\n            useMesh={true}\n            animate={ false }\n            onClick={(node, e) => allModal(node)}\n            axisTop={ null }\n            axisRight={ null }\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: -45,\n                legend: null,\n                format: props.axisBottomFormat,\n                tickValues: props.tickValues,\n\n\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: null\n            }}\n\n            legends={[{\n              anchor: 'bottom-right',\n              direction: 'column',\n              justify: false,\n              translateX: 200,\n              translateY: 0,\n              itemWidth: 100,\n              itemHeight: 12,\n              itemsSpacing: 5,\n              itemDirection: 'left-to-right',\n              symbolSize: 12,\n              symbolShape: 'square',\n              effects: [{\n                on: 'hover',\n                style: {\n                  itemOpacity: 1\n                }\n              }]\n            }]}\n          />\n          <div className=\"scatter-modal\">\n          <Modal\n            isOpen={modalIsOpen}\n            onAfterOpen={afterOpenModal}\n            onRequestClose={closeModal}\n            contentLabel=\"Example Modal\"\n            ariaHideApp={false}\n            className=\"Modal\"\n          >\n            <h2 ref={_subtitle => (subtitle = _subtitle)}>{modalTitle}</h2>\n            <button className=\"close-btn\" onClick={closeModal}>close</button>\n\n            <div className=\"tableholder\">\n              {tables}\n            </div>\n\n          </Modal>\n          </div>\n\n        </div>\n      }\n      {\n        props.loading &&\n        <div className=\"overlay\">\n          <Spinner name=\"ball-beat\" color={COLOR_SCHEMES['rainbow'][0]} />\n        </div>\n      }\n    </div>\n  )\n}\n\nconst compareChartData = (prevProps, nextProps) => {\n  return prevProps.chartData === nextProps.chartData && prevProps.loading === nextProps.loading\n}\n\nexport default React.memo(PrismStaticScatterplot, compareChartData);\n","import React from 'react';\nimport {useTable} from 'react-table'\nimport styled from 'styled-components'\nimport './index.css'\n\n\n\nfunction Table({columns, data}) {\n  const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow} = useTable({columns, data})\n\n  // Render Data Table UI\n  return (\n    <div className=\"table-container\">\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup\n              .headers\n              .map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row\n                .cells\n                .map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n            </tr>\n          )\n        })}\n      </tbody>\n      </table>\n    </div>\n\n\n  )\n}\n\nconst ModalTable = (props) =>  {\n\n\n  return (\n\n    <Table\n      data={props.data}\n      columns={props.columns}\n    />\n\n  )\n}\n\nexport default ModalTable\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport Spinner from 'react-spinkit'\nimport { ResponsiveHeatMap } from '@nivo/heatmap'\n\nimport { COLOR_SCHEMES } from '../../../../constants'\nimport ChartTooltip from '../tooltip'\nimport LandscapeTooltip from '../landscape-tooltip'\nimport Modal from 'react-modal';\nimport MainTable from '../tabulator'\nimport ModalTable from '../modal-table'\nimport './index.css'\n\n//import ChartTooltip from '../tooltip'\n//import { COLORS, COLOR_SCHEMES } from '../../../../constants'\n\nimport './index.css'\n\nconst PrismHeatMap = (props) => {\n  // console.log(\"props.fdatda: \", props.data)\n  let all_records = []\n  if (typeof((props.data)[0]) !== 'undefined'){\n    all_records = (props.data)[0]\n  }\n\n  //console.log(\"ALL reecords\", all_records)\n  // console.log(all_records[\"data\"])\n  // console.log(\"HERE: \", all_records[\"Other\"], all_records.setting)\n\n  var subtitle;\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [allTableData, setAllTableData] = useState([])\n  const [tables, setTables] = useState([])\n  const [modalTitle, setModalTitle] = useState(\"\")\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    // subtitle.style.color = '#f00';\n  }\n\n  function closeModal(){\n    setIsOpen(false);\n  }\n\n  function allModal(node, e, all_records){\n    console.log(\"NODE: \", node)\n    console.log(\"E: \", e)\n    //console.log(\"type: \", typeof(node.data.formattedX))\n    let title= node.xKey + \" by \" + node.yKey\n    // if (typeof(node.data.formattedX)==='object'){\n    //   let x = String(node.data.x)\n    //   title = x.slice(4, 15) + \" x \" + node.data.y\n    // } else {\n    //   title = node.data.x + \" x \" + node.data.y\n    // }\n    let clean_all = (all_records[0]).data\n    console.log(\"CLEAN ALL: \", clean_all)\n    let alltables = []\n    //console.log(\"CHECKING: \", node.data.all)\n    // let complete = node.data.all\n    let ys = (node.yKey).split(\" + \")\n    console.log(\"Ys: \", ys)\n\n    let clean_data = []\n    // console.log(\"all recrods: \", all_records)\n    for (let i of clean_all){\n      //console.log(\"BIG: \", (i[\"Combined Outcome Categories\"]).includes(node.xKey))\n    //  console.log(\"BIG2: \", String(i[\"Intervention Setting\"])===String(ys))\n      if ((i[\"Combined Outcome Categories\"]).includes(node.xKey) && (i[\"Intervention Setting\"]).length === ys.length){\n        console.log(\"IIIII: \", i)\n        if (String(i[\"Intervention Setting\"])===String(ys)){\n          i[\"key\"] = clean_all.indexOf(i)\n          clean_data.push(i)\n        }\n      }\n\n    }\n    console.log(\"clean_data: \", clean_data)\n\n    setAllTableData(alltables)\n    let table = []\n    // for (let item of clean_all){\n    //   // console.log(\"complete[item]: \", clean_all)\n    //   table.push(<div>\n    //       <h3>{item}</h3>\n    //       <MainTable tabledata={ clean_data } height={\"auto\"} />\n    //     </div>\n    //   )\n    // }\n    table.push(<div>\n          \n          <MainTable tabledata={ clean_data } height={\"auto\"} />\n        </div>\n\n    )\n    console.log(table)\n    setTables(table)\n    setModalTitle(title)\n    openModal()\n  }\n\n\n  return (\n    <div className=\"heat-map-container\">\n    <ResponsiveHeatMap\n        data={props.data}\n        keys={props.keys}\n        indexBy={\"setting\"}\n        margin={{ top: 200, right: 40, bottom: 60, left: 300 }}\n        forceSquare={true}\n        colors=\"YlGn\"\n        axisTop={{ orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -90, legend: '', legendOffset: 36 }}\n        axisRight={null}\n        axisBottom={null}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: -45,\n\n            legendPosition: 'middle',\n            legendOffset: -40\n        }}\n\n\n        onClick={(node, e) => allModal(node, e, props.data)}\n        hoverTarget=\"cell\"\n        cellHoverOthersOpacity={0.25}\n    />\n    <div className=\"scatter-modal\">\n    <Modal\n      isOpen={modalIsOpen}\n      onAfterOpen={afterOpenModal}\n      onRequestClose={closeModal}\n      contentLabel=\"Example Modal\"\n      ariaHideApp={false}\n      className=\"Modal\"\n    >\n      <h2 ref={_subtitle => (subtitle = _subtitle)}>{modalTitle}</h2>\n      <button className=\"close-btn\" onClick={closeModal}>close</button>\n\n      <div className=\"tableholder\">\n        {tables}\n      </div>\n\n    </Modal>\n    </div>\n    </div>\n\n\n\n  )\n\n}\nexport default PrismHeatMap;\n","import React, { useState, useEffect } from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport axios from 'axios';\nimport { Auth } from 'aws-amplify';\nimport * as d3 from 'd3'\n\nimport CsvDownloader from 'react-csv-downloader';\n\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\n\nimport { FaArrowCircleLeft, FaArrowCircleDown } from 'react-icons/fa'\n\nimport Navbar from './components/navbar'\nimport Searchbar from './components/searchbar'\nimport SearchFilters from './components/search-filters'\nimport SingleStat from './components/single-stat'\nimport SectionTitle from './components/section-title'\nimport PrismPieChart from './components/pie-chart'\nimport PrismAreaBump from './components/area-bump'\nimport PrismLineChart from './components/line-chart'\nimport PrismBarChart from './components/bar-chart'\nimport PrismSunburst from './components/sunburst-chart'\nimport PrismScatterplot from './components/scatterplot'\nimport PrismStaticScatterplot from './components/scatterplot-static'\nimport PrismChoropleth from './components/choropleth'\nimport MainTable from './components/tabulator'\nimport PrismTextBlock from './components/text-block'\nimport PrismModal from './components/modal'\nimport PrismHeatMap from './components/heat-map'\n\n\nimport './index.css'\nimport 'react-tabulator/lib/styles.css';\nimport 'react-tabulator/css/bootstrap/tabulator_bootstrap.min.css';\nimport 'react-tabulator/lib/styles.css';\n\n\n\nfunction DashboardRoute(props) {\n\n  let Airtable = require('airtable');\n  let base = new Airtable({apiKey: 'key8POUQgTG9Ubm4J'}).base('appw9qP0xvfA2Kjkk');\n\n  function countOccurrences(dictionary, key){\n    if (key in dictionary){\n      dictionary[key]+=1;\n    } else {\n      dictionary[key] = 1\n    }\n  }\n\n\n  const [loadingHeatMapData, setLoadingHeatMapData] = useState(true)\n  const [heatMapData, setHeatMapData] = useState([])\n  const [heatMapKeys, setHeatMapKeys] = useState([])\n  const [initialFilterLoadComplete, setInitialFilterLoadComplete] = useState(true)\n\n  function getHeatMapChartData() {\n  //console.log(\"getPopulationsChartsData\")\n    let heat_result = {}\n    let heat_data = []\n    let alldata = {}\n    let keys = new Set()\n    let all = []\n    return new Promise((resolve, reject) => {\n      base('Intervention Table').select({\n\n        // filterByFormula: airtableFilters,\n        view: \"Comprehensive View\"\n      }).eachPage(function page(records, fetchNextPage) {\n\n        records.forEach(function(record) {\n          all.push(record.fields)\n\n\n          let setting = record.get(\"Intervention Setting\")\n          if (typeof(setting)==='undefined'){\n            console.log(setting)\n          }\n          let clean_setting = \"\"\n          if (setting.length > 1){\n            for (let i of setting){\n              if (i === setting[0]){\n                clean_setting = i\n              } else {\n                clean_setting = clean_setting + \" + \" + i\n              }\n            }\n          } else {\n            clean_setting = setting[0]\n          }\n          //keys.add(clean_setting)\n          let outcomes = record.get(\"Combined Outcome Categories\")\n          if (typeof(outcomes)==='undefined'){\n            console.log(outcomes)\n          }\n\n          //console.log(setting, outcomes)\n\n          if (! (Object.keys(alldata)).includes(clean_setting)) {\n            // if it's not already in there\n            let val = {}\n            for (let j of outcomes){\n              //console.log(\"j: \", j)\n              keys.add(j)\n              val[j] = 1\n            }\n            //console.log(\"val: \", val)\n            alldata[clean_setting] = val\n          } else {\n            // look up the value dict\n            //console.log(\"heere: \", alldata[clean_setting])\n            let val = alldata[clean_setting]\n            for (let j of outcomes){\n              //console.log(\"J: \", j, val)\n              countOccurrences(val, j)\n            }\n            //console.log(\"updated val: \", val)\n            alldata[clean_setting] = val\n          }\n          //console.log(\"alldata: \", alldata)\n\n\n        });\n\n        fetchNextPage();\n\n      }, function done(err) {\n        if (err) {\n          console.error(err);\n          return reject({});\n        }\n      //  console.log(\"DATA: \", alldata)\n        // now fix the data so that its in the right format\n        //********\n        // for each item in the dictionary\n        for (let key of Object.keys(alldata)){\n          let single = alldata[key]\n          single[\"setting\"] = key\n          console.log('check: ', alldata[key])\n          single[\"data\"] = all\n\n          heat_data.push(single)\n        }\n        //console.log(\"HEAT DATA: \", heat_data)\n        for (let item of heat_data){\n          for (let j of keys){\n            if (! (Object.keys(item)).includes(j)) {\n              item[j] = 0\n            }\n          }\n        }\n        heat_result[\"data\"] = heat_data\n\n\n        heat_result[\"keys\"] = [...keys]\n        resolve(heat_result)\n\n      })\n    })\n  }// end of get PopulationsData\n\n\n  const fetchHeatMapData = async () => {\n    //console.log(\"fetchPopulationData\")\n    const result = await getHeatMapChartData()\n    setHeatMapData(result.data)\n    setHeatMapKeys(result.keys)\n    console.log(\"RESULT: \", result)\n    setLoadingHeatMapData(false)\n\n  }\n\n  useEffect(() => {\n    if (initialFilterLoadComplete){\n      setLoadingHeatMapData(true);\n      fetchHeatMapData();\n    }\n\n\n  },[initialFilterLoadComplete])\n\n\n\n  return (\n    <div>\n\n      <Container>\n        <div>\n          <div>\n          <Row className=\"title-block\">\n\n          </Row>\n\n\n\n\n              \n\n                      <PrismHeatMap\n                        data={heatMapData}\n                        keys={heatMapKeys}\n                      />\n\n\n\n\n\n\n          </div>\n        </div>\n\n      </Container>\n    </div>\n\n  )\n}\n\n\n\nexport default withRouter(DashboardRoute);\n","// FIXME: Implement using process.env for prod!\n\nconst staging = {\n  cognito: {\n    REGION: \"us-east-1\",\n    USER_POOL_ID: \"us-east-1_znJUp9ckV\",\n    APP_CLIENT_ID: \"2tnhakq78q65qg7ptuf87d7uh4\",\n  }\n};\n\n// const config = process.env.REACT_APP_STAGE === \"prod\" ? prod : dev;\nconst config = staging;\n\nexport default {\n  ...config\n};\n","import React from 'react';\n\nimport Amplify from 'aws-amplify';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from \"react-router-dom\";\n\nimport DashboardRoute from '../src/routes/dashboard'\n// import LoginRoute from '../src/routes/login'\n\nimport config from './config/aws-config'\nimport './App.css';\n\n// Amplify.configure({\n//   Auth: {\n//     mandatorySignIn: true,\n//     region: config.cognito.REGION,\n//     userPoolId: config.cognito.USER_POOL_ID,\n//     userPoolWebClientId: config.cognito.APP_CLIENT_ID\n//   }\n// });\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <DashboardRoute />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}